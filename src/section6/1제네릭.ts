/**
 * 제네릭(generic) (한국어로 일반적인, 포괄적인)
 * 제네릭 함수를 만들어주면 우리가 원하는 대로 함수의 인수에 따라서 반환값의 type을 가변적으로 정해줄 수 있음
 * 쉽게 말해 제네릭 함수는 모든 타입에 두루두루 쓸 수 있는 범용적인 함수다라고 생각하면 됨
 */

// 제네릭 함수 만드는 법
// 1. 함수의 이름뒤에 꺽쇠 열고 안에 대문자 T 넣음
// - 꺽쇠안에 T는 type을 저장하는 변수임 (<T> 우리는 이걸 : 타입변수 라고 함)
// - 타입변수는 함수를 호출할 때 인수의 타입이 어떤 타입인가에 따라 타입변수에 저장되는 타입이 달라짐
// 2. 매개변수의 타입을 T로 바꿔 줌
// 3. 반환값의 타입도 T로 바꿔 줌
function func<T>(value: T): T {
  return value;
}

// 이러한 인수를 오류 없이 쓰려면 value: any; 치트키 타입을 써야함
// 하지만 우리가 원하는 것은 인수에 따라 해당 타입이 나오면 좋겠음 => 제네릭 사용으로 해결가능
let num = func(10);

let bool = func(true);

let str = func("hello");

// 타입변수에 할당되는 타입을 인수를 통해 추론되게 하지말고 프로그래머가 명시적으로 정의가능
// 원래는 number[] 로 추론되는데 만약에 튜플 타입으로 추론되게 하고싶다면 1. 타입 단언을 사용해도 되지만 비추천
// 2. 함수의 이름뒤에 꺽쇠하고 안에다가 타입변수T에 할당하고 싶은 타입을 작성해주면 됨
let arr = func<[number, number, number]>([1, 2, 3]);

/** 정리
 * 타입변수와 함께 여러 타입의 값을 인수로 받아서 범용적으로 쓸 수 있는 함수를 제네릭 함수라고 함
 * 제네릭 함수들은 꺽쇠와 함께 함수의 이름뒤에 선언하고 타입 변수에 할당하는 타입은 함수를 호출할 때 인수에 따라 결정된다.
 */
